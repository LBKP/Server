// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Getway.proto

#ifndef PROTOBUF_INCLUDED_Getway_2eproto
#define PROTOBUF_INCLUDED_Getway_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Getway_2eproto 

namespace protobuf_Getway_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Getway_2eproto
namespace Getway {
class MessageError;
class MessageErrorDefaultTypeInternal;
extern MessageErrorDefaultTypeInternal _MessageError_default_instance_;
class ServerRegister;
class ServerRegisterDefaultTypeInternal;
extern ServerRegisterDefaultTypeInternal _ServerRegister_default_instance_;
}  // namespace Getway
namespace google {
namespace protobuf {
template<> ::Getway::MessageError* Arena::CreateMaybeMessage<::Getway::MessageError>(Arena*);
template<> ::Getway::ServerRegister* Arena::CreateMaybeMessage<::Getway::ServerRegister>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Getway {

enum MessageError_ErrorType {
  MessageError_ErrorType_HASH_ERROR = 0,
  MessageError_ErrorType_MESSAGE_FORMAT_ERROR = 1,
  MessageError_ErrorType_CHECK_SUM_ERROR = 2,
  MessageError_ErrorType_MessageError_ErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageError_ErrorType_MessageError_ErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageError_ErrorType_IsValid(int value);
const MessageError_ErrorType MessageError_ErrorType_ErrorType_MIN = MessageError_ErrorType_HASH_ERROR;
const MessageError_ErrorType MessageError_ErrorType_ErrorType_MAX = MessageError_ErrorType_CHECK_SUM_ERROR;
const int MessageError_ErrorType_ErrorType_ARRAYSIZE = MessageError_ErrorType_ErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageError_ErrorType_descriptor();
inline const ::std::string& MessageError_ErrorType_Name(MessageError_ErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageError_ErrorType_descriptor(), value);
}
inline bool MessageError_ErrorType_Parse(
    const ::std::string& name, MessageError_ErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageError_ErrorType>(
    MessageError_ErrorType_descriptor(), name, value);
}
enum ServerType {
  LOGIN = 0,
  LOBBY = 1,
  ServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerType_IsValid(int value);
const ServerType ServerType_MIN = LOGIN;
const ServerType ServerType_MAX = LOBBY;
const int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor();
inline const ::std::string& ServerType_Name(ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerType_descriptor(), value);
}
inline bool ServerType_Parse(
    const ::std::string& name, ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
// ===================================================================

class ServerRegister : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Getway.ServerRegister) */ {
 public:
  ServerRegister();
  virtual ~ServerRegister();

  ServerRegister(const ServerRegister& from);

  inline ServerRegister& operator=(const ServerRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerRegister(ServerRegister&& from) noexcept
    : ServerRegister() {
    *this = ::std::move(from);
  }

  inline ServerRegister& operator=(ServerRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerRegister* internal_default_instance() {
    return reinterpret_cast<const ServerRegister*>(
               &_ServerRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerRegister* other);
  friend void swap(ServerRegister& a, ServerRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerRegister* New() const final {
    return CreateMaybeMessage<ServerRegister>(NULL);
  }

  ServerRegister* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerRegister& from);
  void MergeFrom(const ServerRegister& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Getway.ServerType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Getway::ServerType type() const;
  void set_type(::Getway::ServerType value);

  // @@protoc_insertion_point(class_scope:Getway.ServerRegister)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Getway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Getway.MessageError) */ {
 public:
  MessageError();
  virtual ~MessageError();

  MessageError(const MessageError& from);

  inline MessageError& operator=(const MessageError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageError(MessageError&& from) noexcept
    : MessageError() {
    *this = ::std::move(from);
  }

  inline MessageError& operator=(MessageError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageError* internal_default_instance() {
    return reinterpret_cast<const MessageError*>(
               &_MessageError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MessageError* other);
  friend void swap(MessageError& a, MessageError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageError* New() const final {
    return CreateMaybeMessage<MessageError>(NULL);
  }

  MessageError* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageError>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageError& from);
  void MergeFrom(const MessageError& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MessageError_ErrorType ErrorType;
  static const ErrorType HASH_ERROR =
    MessageError_ErrorType_HASH_ERROR;
  static const ErrorType MESSAGE_FORMAT_ERROR =
    MessageError_ErrorType_MESSAGE_FORMAT_ERROR;
  static const ErrorType CHECK_SUM_ERROR =
    MessageError_ErrorType_CHECK_SUM_ERROR;
  static inline bool ErrorType_IsValid(int value) {
    return MessageError_ErrorType_IsValid(value);
  }
  static const ErrorType ErrorType_MIN =
    MessageError_ErrorType_ErrorType_MIN;
  static const ErrorType ErrorType_MAX =
    MessageError_ErrorType_ErrorType_MAX;
  static const int ErrorType_ARRAYSIZE =
    MessageError_ErrorType_ErrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorType_descriptor() {
    return MessageError_ErrorType_descriptor();
  }
  static inline const ::std::string& ErrorType_Name(ErrorType value) {
    return MessageError_ErrorType_Name(value);
  }
  static inline bool ErrorType_Parse(const ::std::string& name,
      ErrorType* value) {
    return MessageError_ErrorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Getway.MessageError.ErrorType error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::Getway::MessageError_ErrorType error() const;
  void set_error(::Getway::MessageError_ErrorType value);

  // @@protoc_insertion_point(class_scope:Getway.MessageError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Getway_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerRegister

// .Getway.ServerType type = 1;
inline void ServerRegister::clear_type() {
  type_ = 0;
}
inline ::Getway::ServerType ServerRegister::type() const {
  // @@protoc_insertion_point(field_get:Getway.ServerRegister.type)
  return static_cast< ::Getway::ServerType >(type_);
}
inline void ServerRegister::set_type(::Getway::ServerType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Getway.ServerRegister.type)
}

// -------------------------------------------------------------------

// MessageError

// .Getway.MessageError.ErrorType error = 1;
inline void MessageError::clear_error() {
  error_ = 0;
}
inline ::Getway::MessageError_ErrorType MessageError::error() const {
  // @@protoc_insertion_point(field_get:Getway.MessageError.error)
  return static_cast< ::Getway::MessageError_ErrorType >(error_);
}
inline void MessageError::set_error(::Getway::MessageError_ErrorType value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:Getway.MessageError.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Getway

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Getway::MessageError_ErrorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Getway::MessageError_ErrorType>() {
  return ::Getway::MessageError_ErrorType_descriptor();
}
template <> struct is_proto_enum< ::Getway::ServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Getway::ServerType>() {
  return ::Getway::ServerType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Getway_2eproto
