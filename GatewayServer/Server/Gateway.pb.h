// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gateway.proto

#ifndef PROTOBUF_INCLUDED_Gateway_2eproto
#define PROTOBUF_INCLUDED_Gateway_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Gateway_2eproto 

namespace protobuf_Gateway_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Gateway_2eproto
namespace Gateway {
class AllConnectedServer_GS;
class AllConnectedServer_GSDefaultTypeInternal;
extern AllConnectedServer_GSDefaultTypeInternal _AllConnectedServer_GS_default_instance_;
class ClientConnected_GS;
class ClientConnected_GSDefaultTypeInternal;
extern ClientConnected_GSDefaultTypeInternal _ClientConnected_GS_default_instance_;
class MessageError_G;
class MessageError_GDefaultTypeInternal;
extern MessageError_GDefaultTypeInternal _MessageError_G_default_instance_;
class ServerAttr;
class ServerAttrDefaultTypeInternal;
extern ServerAttrDefaultTypeInternal _ServerAttr_default_instance_;
class ServerConnected_GS;
class ServerConnected_GSDefaultTypeInternal;
extern ServerConnected_GSDefaultTypeInternal _ServerConnected_GS_default_instance_;
class ServerRegister_SG;
class ServerRegister_SGDefaultTypeInternal;
extern ServerRegister_SGDefaultTypeInternal _ServerRegister_SG_default_instance_;
}  // namespace Gateway
namespace google {
namespace protobuf {
template<> ::Gateway::AllConnectedServer_GS* Arena::CreateMaybeMessage<::Gateway::AllConnectedServer_GS>(Arena*);
template<> ::Gateway::ClientConnected_GS* Arena::CreateMaybeMessage<::Gateway::ClientConnected_GS>(Arena*);
template<> ::Gateway::MessageError_G* Arena::CreateMaybeMessage<::Gateway::MessageError_G>(Arena*);
template<> ::Gateway::ServerAttr* Arena::CreateMaybeMessage<::Gateway::ServerAttr>(Arena*);
template<> ::Gateway::ServerConnected_GS* Arena::CreateMaybeMessage<::Gateway::ServerConnected_GS>(Arena*);
template<> ::Gateway::ServerRegister_SG* Arena::CreateMaybeMessage<::Gateway::ServerRegister_SG>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Gateway {

enum MessageError_G_ErrorType {
  MessageError_G_ErrorType_HASH_ERROR = 0,
  MessageError_G_ErrorType_MESSAGE_FORMAT_ERROR = 1,
  MessageError_G_ErrorType_CHECK_SUM_ERROR = 2,
  MessageError_G_ErrorType_MessageError_G_ErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageError_G_ErrorType_MessageError_G_ErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageError_G_ErrorType_IsValid(int value);
const MessageError_G_ErrorType MessageError_G_ErrorType_ErrorType_MIN = MessageError_G_ErrorType_HASH_ERROR;
const MessageError_G_ErrorType MessageError_G_ErrorType_ErrorType_MAX = MessageError_G_ErrorType_CHECK_SUM_ERROR;
const int MessageError_G_ErrorType_ErrorType_ARRAYSIZE = MessageError_G_ErrorType_ErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageError_G_ErrorType_descriptor();
inline const ::std::string& MessageError_G_ErrorType_Name(MessageError_G_ErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageError_G_ErrorType_descriptor(), value);
}
inline bool MessageError_G_ErrorType_Parse(
    const ::std::string& name, MessageError_G_ErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageError_G_ErrorType>(
    MessageError_G_ErrorType_descriptor(), name, value);
}
enum ServerType {
  LOGIN = 0,
  LOBBY = 1,
  ServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerType_IsValid(int value);
const ServerType ServerType_MIN = LOGIN;
const ServerType ServerType_MAX = LOBBY;
const int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor();
inline const ::std::string& ServerType_Name(ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerType_descriptor(), value);
}
inline bool ServerType_Parse(
    const ::std::string& name, ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
// ===================================================================

class ServerAttr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Gateway.ServerAttr) */ {
 public:
  ServerAttr();
  virtual ~ServerAttr();

  ServerAttr(const ServerAttr& from);

  inline ServerAttr& operator=(const ServerAttr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerAttr(ServerAttr&& from) noexcept
    : ServerAttr() {
    *this = ::std::move(from);
  }

  inline ServerAttr& operator=(ServerAttr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerAttr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerAttr* internal_default_instance() {
    return reinterpret_cast<const ServerAttr*>(
               &_ServerAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerAttr* other);
  friend void swap(ServerAttr& a, ServerAttr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerAttr* New() const final {
    return CreateMaybeMessage<ServerAttr>(NULL);
  }

  ServerAttr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerAttr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerAttr& from);
  void MergeFrom(const ServerAttr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerAttr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  ::google::protobuf::int32 hash() const;
  void set_hash(::google::protobuf::int32 value);

  // .Gateway.ServerType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Gateway::ServerType type() const;
  void set_type(::Gateway::ServerType value);

  // @@protoc_insertion_point(class_scope:Gateway.ServerAttr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 hash_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Gateway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerRegister_SG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Gateway.ServerRegister_SG) */ {
 public:
  ServerRegister_SG();
  virtual ~ServerRegister_SG();

  ServerRegister_SG(const ServerRegister_SG& from);

  inline ServerRegister_SG& operator=(const ServerRegister_SG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerRegister_SG(ServerRegister_SG&& from) noexcept
    : ServerRegister_SG() {
    *this = ::std::move(from);
  }

  inline ServerRegister_SG& operator=(ServerRegister_SG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerRegister_SG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerRegister_SG* internal_default_instance() {
    return reinterpret_cast<const ServerRegister_SG*>(
               &_ServerRegister_SG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerRegister_SG* other);
  friend void swap(ServerRegister_SG& a, ServerRegister_SG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerRegister_SG* New() const final {
    return CreateMaybeMessage<ServerRegister_SG>(NULL);
  }

  ServerRegister_SG* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerRegister_SG>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerRegister_SG& from);
  void MergeFrom(const ServerRegister_SG& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerRegister_SG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Gateway.ServerAttr server = 1;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 1;
  private:
  const ::Gateway::ServerAttr& _internal_server() const;
  public:
  const ::Gateway::ServerAttr& server() const;
  ::Gateway::ServerAttr* release_server();
  ::Gateway::ServerAttr* mutable_server();
  void set_allocated_server(::Gateway::ServerAttr* server);

  // @@protoc_insertion_point(class_scope:Gateway.ServerRegister_SG)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Gateway::ServerAttr* server_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Gateway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerConnected_GS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Gateway.ServerConnected_GS) */ {
 public:
  ServerConnected_GS();
  virtual ~ServerConnected_GS();

  ServerConnected_GS(const ServerConnected_GS& from);

  inline ServerConnected_GS& operator=(const ServerConnected_GS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerConnected_GS(ServerConnected_GS&& from) noexcept
    : ServerConnected_GS() {
    *this = ::std::move(from);
  }

  inline ServerConnected_GS& operator=(ServerConnected_GS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConnected_GS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConnected_GS* internal_default_instance() {
    return reinterpret_cast<const ServerConnected_GS*>(
               &_ServerConnected_GS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServerConnected_GS* other);
  friend void swap(ServerConnected_GS& a, ServerConnected_GS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerConnected_GS* New() const final {
    return CreateMaybeMessage<ServerConnected_GS>(NULL);
  }

  ServerConnected_GS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerConnected_GS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerConnected_GS& from);
  void MergeFrom(const ServerConnected_GS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConnected_GS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Gateway.ServerAttr server = 1;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 1;
  private:
  const ::Gateway::ServerAttr& _internal_server() const;
  public:
  const ::Gateway::ServerAttr& server() const;
  ::Gateway::ServerAttr* release_server();
  ::Gateway::ServerAttr* mutable_server();
  void set_allocated_server(::Gateway::ServerAttr* server);

  // bool connected = 2;
  void clear_connected();
  static const int kConnectedFieldNumber = 2;
  bool connected() const;
  void set_connected(bool value);

  // @@protoc_insertion_point(class_scope:Gateway.ServerConnected_GS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Gateway::ServerAttr* server_;
  bool connected_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Gateway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageError_G : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Gateway.MessageError_G) */ {
 public:
  MessageError_G();
  virtual ~MessageError_G();

  MessageError_G(const MessageError_G& from);

  inline MessageError_G& operator=(const MessageError_G& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageError_G(MessageError_G&& from) noexcept
    : MessageError_G() {
    *this = ::std::move(from);
  }

  inline MessageError_G& operator=(MessageError_G&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageError_G& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageError_G* internal_default_instance() {
    return reinterpret_cast<const MessageError_G*>(
               &_MessageError_G_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MessageError_G* other);
  friend void swap(MessageError_G& a, MessageError_G& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageError_G* New() const final {
    return CreateMaybeMessage<MessageError_G>(NULL);
  }

  MessageError_G* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageError_G>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageError_G& from);
  void MergeFrom(const MessageError_G& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageError_G* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MessageError_G_ErrorType ErrorType;
  static const ErrorType HASH_ERROR =
    MessageError_G_ErrorType_HASH_ERROR;
  static const ErrorType MESSAGE_FORMAT_ERROR =
    MessageError_G_ErrorType_MESSAGE_FORMAT_ERROR;
  static const ErrorType CHECK_SUM_ERROR =
    MessageError_G_ErrorType_CHECK_SUM_ERROR;
  static inline bool ErrorType_IsValid(int value) {
    return MessageError_G_ErrorType_IsValid(value);
  }
  static const ErrorType ErrorType_MIN =
    MessageError_G_ErrorType_ErrorType_MIN;
  static const ErrorType ErrorType_MAX =
    MessageError_G_ErrorType_ErrorType_MAX;
  static const int ErrorType_ARRAYSIZE =
    MessageError_G_ErrorType_ErrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorType_descriptor() {
    return MessageError_G_ErrorType_descriptor();
  }
  static inline const ::std::string& ErrorType_Name(ErrorType value) {
    return MessageError_G_ErrorType_Name(value);
  }
  static inline bool ErrorType_Parse(const ::std::string& name,
      ErrorType* value) {
    return MessageError_G_ErrorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Gateway.MessageError_G.ErrorType error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::Gateway::MessageError_G_ErrorType error() const;
  void set_error(::Gateway::MessageError_G_ErrorType value);

  // @@protoc_insertion_point(class_scope:Gateway.MessageError_G)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Gateway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientConnected_GS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Gateway.ClientConnected_GS) */ {
 public:
  ClientConnected_GS();
  virtual ~ClientConnected_GS();

  ClientConnected_GS(const ClientConnected_GS& from);

  inline ClientConnected_GS& operator=(const ClientConnected_GS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientConnected_GS(ClientConnected_GS&& from) noexcept
    : ClientConnected_GS() {
    *this = ::std::move(from);
  }

  inline ClientConnected_GS& operator=(ClientConnected_GS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientConnected_GS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientConnected_GS* internal_default_instance() {
    return reinterpret_cast<const ClientConnected_GS*>(
               &_ClientConnected_GS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ClientConnected_GS* other);
  friend void swap(ClientConnected_GS& a, ClientConnected_GS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientConnected_GS* New() const final {
    return CreateMaybeMessage<ClientConnected_GS>(NULL);
  }

  ClientConnected_GS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientConnected_GS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientConnected_GS& from);
  void MergeFrom(const ClientConnected_GS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientConnected_GS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  ::google::protobuf::int32 hash() const;
  void set_hash(::google::protobuf::int32 value);

  // bool connected = 2;
  void clear_connected();
  static const int kConnectedFieldNumber = 2;
  bool connected() const;
  void set_connected(bool value);

  // @@protoc_insertion_point(class_scope:Gateway.ClientConnected_GS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 hash_;
  bool connected_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Gateway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllConnectedServer_GS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Gateway.AllConnectedServer_GS) */ {
 public:
  AllConnectedServer_GS();
  virtual ~AllConnectedServer_GS();

  AllConnectedServer_GS(const AllConnectedServer_GS& from);

  inline AllConnectedServer_GS& operator=(const AllConnectedServer_GS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllConnectedServer_GS(AllConnectedServer_GS&& from) noexcept
    : AllConnectedServer_GS() {
    *this = ::std::move(from);
  }

  inline AllConnectedServer_GS& operator=(AllConnectedServer_GS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllConnectedServer_GS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllConnectedServer_GS* internal_default_instance() {
    return reinterpret_cast<const AllConnectedServer_GS*>(
               &_AllConnectedServer_GS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AllConnectedServer_GS* other);
  friend void swap(AllConnectedServer_GS& a, AllConnectedServer_GS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllConnectedServer_GS* New() const final {
    return CreateMaybeMessage<AllConnectedServer_GS>(NULL);
  }

  AllConnectedServer_GS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllConnectedServer_GS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllConnectedServer_GS& from);
  void MergeFrom(const AllConnectedServer_GS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllConnectedServer_GS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Gateway.ServerAttr server = 1;
  int server_size() const;
  void clear_server();
  static const int kServerFieldNumber = 1;
  ::Gateway::ServerAttr* mutable_server(int index);
  ::google::protobuf::RepeatedPtrField< ::Gateway::ServerAttr >*
      mutable_server();
  const ::Gateway::ServerAttr& server(int index) const;
  ::Gateway::ServerAttr* add_server();
  const ::google::protobuf::RepeatedPtrField< ::Gateway::ServerAttr >&
      server() const;

  // @@protoc_insertion_point(class_scope:Gateway.AllConnectedServer_GS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Gateway::ServerAttr > server_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Gateway_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerAttr

// int32 hash = 1;
inline void ServerAttr::clear_hash() {
  hash_ = 0;
}
inline ::google::protobuf::int32 ServerAttr::hash() const {
  // @@protoc_insertion_point(field_get:Gateway.ServerAttr.hash)
  return hash_;
}
inline void ServerAttr::set_hash(::google::protobuf::int32 value) {
  
  hash_ = value;
  // @@protoc_insertion_point(field_set:Gateway.ServerAttr.hash)
}

// .Gateway.ServerType type = 2;
inline void ServerAttr::clear_type() {
  type_ = 0;
}
inline ::Gateway::ServerType ServerAttr::type() const {
  // @@protoc_insertion_point(field_get:Gateway.ServerAttr.type)
  return static_cast< ::Gateway::ServerType >(type_);
}
inline void ServerAttr::set_type(::Gateway::ServerType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Gateway.ServerAttr.type)
}

// -------------------------------------------------------------------

// ServerRegister_SG

// .Gateway.ServerAttr server = 1;
inline bool ServerRegister_SG::has_server() const {
  return this != internal_default_instance() && server_ != NULL;
}
inline void ServerRegister_SG::clear_server() {
  if (GetArenaNoVirtual() == NULL && server_ != NULL) {
    delete server_;
  }
  server_ = NULL;
}
inline const ::Gateway::ServerAttr& ServerRegister_SG::_internal_server() const {
  return *server_;
}
inline const ::Gateway::ServerAttr& ServerRegister_SG::server() const {
  const ::Gateway::ServerAttr* p = server_;
  // @@protoc_insertion_point(field_get:Gateway.ServerRegister_SG.server)
  return p != NULL ? *p : *reinterpret_cast<const ::Gateway::ServerAttr*>(
      &::Gateway::_ServerAttr_default_instance_);
}
inline ::Gateway::ServerAttr* ServerRegister_SG::release_server() {
  // @@protoc_insertion_point(field_release:Gateway.ServerRegister_SG.server)
  
  ::Gateway::ServerAttr* temp = server_;
  server_ = NULL;
  return temp;
}
inline ::Gateway::ServerAttr* ServerRegister_SG::mutable_server() {
  
  if (server_ == NULL) {
    auto* p = CreateMaybeMessage<::Gateway::ServerAttr>(GetArenaNoVirtual());
    server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Gateway.ServerRegister_SG.server)
  return server_;
}
inline void ServerRegister_SG::set_allocated_server(::Gateway::ServerAttr* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_;
  }
  if (server) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:Gateway.ServerRegister_SG.server)
}

// -------------------------------------------------------------------

// ServerConnected_GS

// .Gateway.ServerAttr server = 1;
inline bool ServerConnected_GS::has_server() const {
  return this != internal_default_instance() && server_ != NULL;
}
inline void ServerConnected_GS::clear_server() {
  if (GetArenaNoVirtual() == NULL && server_ != NULL) {
    delete server_;
  }
  server_ = NULL;
}
inline const ::Gateway::ServerAttr& ServerConnected_GS::_internal_server() const {
  return *server_;
}
inline const ::Gateway::ServerAttr& ServerConnected_GS::server() const {
  const ::Gateway::ServerAttr* p = server_;
  // @@protoc_insertion_point(field_get:Gateway.ServerConnected_GS.server)
  return p != NULL ? *p : *reinterpret_cast<const ::Gateway::ServerAttr*>(
      &::Gateway::_ServerAttr_default_instance_);
}
inline ::Gateway::ServerAttr* ServerConnected_GS::release_server() {
  // @@protoc_insertion_point(field_release:Gateway.ServerConnected_GS.server)
  
  ::Gateway::ServerAttr* temp = server_;
  server_ = NULL;
  return temp;
}
inline ::Gateway::ServerAttr* ServerConnected_GS::mutable_server() {
  
  if (server_ == NULL) {
    auto* p = CreateMaybeMessage<::Gateway::ServerAttr>(GetArenaNoVirtual());
    server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Gateway.ServerConnected_GS.server)
  return server_;
}
inline void ServerConnected_GS::set_allocated_server(::Gateway::ServerAttr* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_;
  }
  if (server) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:Gateway.ServerConnected_GS.server)
}

// bool connected = 2;
inline void ServerConnected_GS::clear_connected() {
  connected_ = false;
}
inline bool ServerConnected_GS::connected() const {
  // @@protoc_insertion_point(field_get:Gateway.ServerConnected_GS.connected)
  return connected_;
}
inline void ServerConnected_GS::set_connected(bool value) {
  
  connected_ = value;
  // @@protoc_insertion_point(field_set:Gateway.ServerConnected_GS.connected)
}

// -------------------------------------------------------------------

// MessageError_G

// .Gateway.MessageError_G.ErrorType error = 1;
inline void MessageError_G::clear_error() {
  error_ = 0;
}
inline ::Gateway::MessageError_G_ErrorType MessageError_G::error() const {
  // @@protoc_insertion_point(field_get:Gateway.MessageError_G.error)
  return static_cast< ::Gateway::MessageError_G_ErrorType >(error_);
}
inline void MessageError_G::set_error(::Gateway::MessageError_G_ErrorType value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:Gateway.MessageError_G.error)
}

// -------------------------------------------------------------------

// ClientConnected_GS

// int32 hash = 1;
inline void ClientConnected_GS::clear_hash() {
  hash_ = 0;
}
inline ::google::protobuf::int32 ClientConnected_GS::hash() const {
  // @@protoc_insertion_point(field_get:Gateway.ClientConnected_GS.hash)
  return hash_;
}
inline void ClientConnected_GS::set_hash(::google::protobuf::int32 value) {
  
  hash_ = value;
  // @@protoc_insertion_point(field_set:Gateway.ClientConnected_GS.hash)
}

// bool connected = 2;
inline void ClientConnected_GS::clear_connected() {
  connected_ = false;
}
inline bool ClientConnected_GS::connected() const {
  // @@protoc_insertion_point(field_get:Gateway.ClientConnected_GS.connected)
  return connected_;
}
inline void ClientConnected_GS::set_connected(bool value) {
  
  connected_ = value;
  // @@protoc_insertion_point(field_set:Gateway.ClientConnected_GS.connected)
}

// -------------------------------------------------------------------

// AllConnectedServer_GS

// repeated .Gateway.ServerAttr server = 1;
inline int AllConnectedServer_GS::server_size() const {
  return server_.size();
}
inline void AllConnectedServer_GS::clear_server() {
  server_.Clear();
}
inline ::Gateway::ServerAttr* AllConnectedServer_GS::mutable_server(int index) {
  // @@protoc_insertion_point(field_mutable:Gateway.AllConnectedServer_GS.server)
  return server_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Gateway::ServerAttr >*
AllConnectedServer_GS::mutable_server() {
  // @@protoc_insertion_point(field_mutable_list:Gateway.AllConnectedServer_GS.server)
  return &server_;
}
inline const ::Gateway::ServerAttr& AllConnectedServer_GS::server(int index) const {
  // @@protoc_insertion_point(field_get:Gateway.AllConnectedServer_GS.server)
  return server_.Get(index);
}
inline ::Gateway::ServerAttr* AllConnectedServer_GS::add_server() {
  // @@protoc_insertion_point(field_add:Gateway.AllConnectedServer_GS.server)
  return server_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Gateway::ServerAttr >&
AllConnectedServer_GS::server() const {
  // @@protoc_insertion_point(field_list:Gateway.AllConnectedServer_GS.server)
  return server_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Gateway

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Gateway::MessageError_G_ErrorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Gateway::MessageError_G_ErrorType>() {
  return ::Gateway::MessageError_G_ErrorType_descriptor();
}
template <> struct is_proto_enum< ::Gateway::ServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Gateway::ServerType>() {
  return ::Gateway::ServerType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Gateway_2eproto
