// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef PROTOBUF_INCLUDED_Login_2eproto
#define PROTOBUF_INCLUDED_Login_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Login_2eproto 

namespace protobuf_Login_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Login_2eproto
namespace LOGIN {
class ClientLogin_CL;
class ClientLogin_CLDefaultTypeInternal;
extern ClientLogin_CLDefaultTypeInternal _ClientLogin_CL_default_instance_;
class LoginState_LC;
class LoginState_LCDefaultTypeInternal;
extern LoginState_LCDefaultTypeInternal _LoginState_LC_default_instance_;
class NewConnection_GL;
class NewConnection_GLDefaultTypeInternal;
extern NewConnection_GLDefaultTypeInternal _NewConnection_GL_default_instance_;
}  // namespace LOGIN
namespace google {
namespace protobuf {
template<> ::LOGIN::ClientLogin_CL* Arena::CreateMaybeMessage<::LOGIN::ClientLogin_CL>(Arena*);
template<> ::LOGIN::LoginState_LC* Arena::CreateMaybeMessage<::LOGIN::LoginState_LC>(Arena*);
template<> ::LOGIN::NewConnection_GL* Arena::CreateMaybeMessage<::LOGIN::NewConnection_GL>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace LOGIN {

enum LoginState_LC_LoginState {
  LoginState_LC_LoginState_SUCCESS = 0,
  LoginState_LC_LoginState_ERROR = 1,
  LoginState_LC_LoginState_LoginState_LC_LoginState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LoginState_LC_LoginState_LoginState_LC_LoginState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LoginState_LC_LoginState_IsValid(int value);
const LoginState_LC_LoginState LoginState_LC_LoginState_LoginState_MIN = LoginState_LC_LoginState_SUCCESS;
const LoginState_LC_LoginState LoginState_LC_LoginState_LoginState_MAX = LoginState_LC_LoginState_ERROR;
const int LoginState_LC_LoginState_LoginState_ARRAYSIZE = LoginState_LC_LoginState_LoginState_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginState_LC_LoginState_descriptor();
inline const ::std::string& LoginState_LC_LoginState_Name(LoginState_LC_LoginState value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginState_LC_LoginState_descriptor(), value);
}
inline bool LoginState_LC_LoginState_Parse(
    const ::std::string& name, LoginState_LC_LoginState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginState_LC_LoginState>(
    LoginState_LC_LoginState_descriptor(), name, value);
}
// ===================================================================

class NewConnection_GL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOGIN.NewConnection_GL) */ {
 public:
  NewConnection_GL();
  virtual ~NewConnection_GL();

  NewConnection_GL(const NewConnection_GL& from);

  inline NewConnection_GL& operator=(const NewConnection_GL& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewConnection_GL(NewConnection_GL&& from) noexcept
    : NewConnection_GL() {
    *this = ::std::move(from);
  }

  inline NewConnection_GL& operator=(NewConnection_GL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewConnection_GL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewConnection_GL* internal_default_instance() {
    return reinterpret_cast<const NewConnection_GL*>(
               &_NewConnection_GL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NewConnection_GL* other);
  friend void swap(NewConnection_GL& a, NewConnection_GL& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewConnection_GL* New() const final {
    return CreateMaybeMessage<NewConnection_GL>(NULL);
  }

  NewConnection_GL* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewConnection_GL>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewConnection_GL& from);
  void MergeFrom(const NewConnection_GL& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewConnection_GL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  ::google::protobuf::int32 hash() const;
  void set_hash(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOGIN.NewConnection_GL)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 hash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Login_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientLogin_CL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOGIN.ClientLogin_CL) */ {
 public:
  ClientLogin_CL();
  virtual ~ClientLogin_CL();

  ClientLogin_CL(const ClientLogin_CL& from);

  inline ClientLogin_CL& operator=(const ClientLogin_CL& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientLogin_CL(ClientLogin_CL&& from) noexcept
    : ClientLogin_CL() {
    *this = ::std::move(from);
  }

  inline ClientLogin_CL& operator=(ClientLogin_CL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientLogin_CL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientLogin_CL* internal_default_instance() {
    return reinterpret_cast<const ClientLogin_CL*>(
               &_ClientLogin_CL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientLogin_CL* other);
  friend void swap(ClientLogin_CL& a, ClientLogin_CL& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientLogin_CL* New() const final {
    return CreateMaybeMessage<ClientLogin_CL>(NULL);
  }

  ClientLogin_CL* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientLogin_CL>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientLogin_CL& from);
  void MergeFrom(const ClientLogin_CL& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientLogin_CL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 CODE_SIZE = 1;
  void clear_code_size();
  static const int kCODESIZEFieldNumber = 1;
  ::google::protobuf::int32 code_size() const;
  void set_code_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOGIN.ClientLogin_CL)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 code_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Login_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginState_LC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOGIN.LoginState_LC) */ {
 public:
  LoginState_LC();
  virtual ~LoginState_LC();

  LoginState_LC(const LoginState_LC& from);

  inline LoginState_LC& operator=(const LoginState_LC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginState_LC(LoginState_LC&& from) noexcept
    : LoginState_LC() {
    *this = ::std::move(from);
  }

  inline LoginState_LC& operator=(LoginState_LC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginState_LC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginState_LC* internal_default_instance() {
    return reinterpret_cast<const LoginState_LC*>(
               &_LoginState_LC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoginState_LC* other);
  friend void swap(LoginState_LC& a, LoginState_LC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginState_LC* New() const final {
    return CreateMaybeMessage<LoginState_LC>(NULL);
  }

  LoginState_LC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginState_LC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginState_LC& from);
  void MergeFrom(const LoginState_LC& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginState_LC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginState_LC_LoginState LoginState;
  static const LoginState SUCCESS =
    LoginState_LC_LoginState_SUCCESS;
  static const LoginState ERROR =
    LoginState_LC_LoginState_ERROR;
  static inline bool LoginState_IsValid(int value) {
    return LoginState_LC_LoginState_IsValid(value);
  }
  static const LoginState LoginState_MIN =
    LoginState_LC_LoginState_LoginState_MIN;
  static const LoginState LoginState_MAX =
    LoginState_LC_LoginState_LoginState_MAX;
  static const int LoginState_ARRAYSIZE =
    LoginState_LC_LoginState_LoginState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LoginState_descriptor() {
    return LoginState_LC_LoginState_descriptor();
  }
  static inline const ::std::string& LoginState_Name(LoginState value) {
    return LoginState_LC_LoginState_Name(value);
  }
  static inline bool LoginState_Parse(const ::std::string& name,
      LoginState* value) {
    return LoginState_LC_LoginState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .LOGIN.LoginState_LC.LoginState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::LOGIN::LoginState_LC_LoginState state() const;
  void set_state(::LOGIN::LoginState_LC_LoginState value);

  // int32 sessionId = 2;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOGIN.LoginState_LC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  ::google::protobuf::int32 sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Login_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewConnection_GL

// int32 hash = 1;
inline void NewConnection_GL::clear_hash() {
  hash_ = 0;
}
inline ::google::protobuf::int32 NewConnection_GL::hash() const {
  // @@protoc_insertion_point(field_get:LOGIN.NewConnection_GL.hash)
  return hash_;
}
inline void NewConnection_GL::set_hash(::google::protobuf::int32 value) {
  
  hash_ = value;
  // @@protoc_insertion_point(field_set:LOGIN.NewConnection_GL.hash)
}

// -------------------------------------------------------------------

// ClientLogin_CL

// int32 CODE_SIZE = 1;
inline void ClientLogin_CL::clear_code_size() {
  code_size_ = 0;
}
inline ::google::protobuf::int32 ClientLogin_CL::code_size() const {
  // @@protoc_insertion_point(field_get:LOGIN.ClientLogin_CL.CODE_SIZE)
  return code_size_;
}
inline void ClientLogin_CL::set_code_size(::google::protobuf::int32 value) {
  
  code_size_ = value;
  // @@protoc_insertion_point(field_set:LOGIN.ClientLogin_CL.CODE_SIZE)
}

// -------------------------------------------------------------------

// LoginState_LC

// .LOGIN.LoginState_LC.LoginState state = 1;
inline void LoginState_LC::clear_state() {
  state_ = 0;
}
inline ::LOGIN::LoginState_LC_LoginState LoginState_LC::state() const {
  // @@protoc_insertion_point(field_get:LOGIN.LoginState_LC.state)
  return static_cast< ::LOGIN::LoginState_LC_LoginState >(state_);
}
inline void LoginState_LC::set_state(::LOGIN::LoginState_LC_LoginState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:LOGIN.LoginState_LC.state)
}

// int32 sessionId = 2;
inline void LoginState_LC::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 LoginState_LC::sessionid() const {
  // @@protoc_insertion_point(field_get:LOGIN.LoginState_LC.sessionId)
  return sessionid_;
}
inline void LoginState_LC::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:LOGIN.LoginState_LC.sessionId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LOGIN

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LOGIN::LoginState_LC_LoginState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LOGIN::LoginState_LC_LoginState>() {
  return ::LOGIN::LoginState_LC_LoginState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Login_2eproto
