// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef PROTOBUF_INCLUDED_Login_2eproto
#define PROTOBUF_INCLUDED_Login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Login_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Login_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Login_2eproto();
namespace Login {
class ClientLogin_CL;
class ClientLogin_CLDefaultTypeInternal;
extern ClientLogin_CLDefaultTypeInternal _ClientLogin_CL_default_instance_;
class ClientNeedLogin_LC;
class ClientNeedLogin_LCDefaultTypeInternal;
extern ClientNeedLogin_LCDefaultTypeInternal _ClientNeedLogin_LC_default_instance_;
class LoginState_LC;
class LoginState_LCDefaultTypeInternal;
extern LoginState_LCDefaultTypeInternal _LoginState_LC_default_instance_;
}  // namespace Login
namespace google {
namespace protobuf {
template<> ::Login::ClientLogin_CL* Arena::CreateMaybeMessage<::Login::ClientLogin_CL>(Arena*);
template<> ::Login::ClientNeedLogin_LC* Arena::CreateMaybeMessage<::Login::ClientNeedLogin_LC>(Arena*);
template<> ::Login::LoginState_LC* Arena::CreateMaybeMessage<::Login::LoginState_LC>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Login {

enum LoginState_LC_LoginState {
  LoginState_LC_LoginState_SUCCESS = 0,
  LoginState_LC_LoginState_CODE_ERROR = 1,
  LoginState_LC_LoginState_BUSY_ERROR = 2,
  LoginState_LC_LoginState_SESSION_ERROR = 3,
  LoginState_LC_LoginState_LoginState_LC_LoginState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  LoginState_LC_LoginState_LoginState_LC_LoginState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool LoginState_LC_LoginState_IsValid(int value);
const LoginState_LC_LoginState LoginState_LC_LoginState_LoginState_MIN = LoginState_LC_LoginState_SUCCESS;
const LoginState_LC_LoginState LoginState_LC_LoginState_LoginState_MAX = LoginState_LC_LoginState_SESSION_ERROR;
const int LoginState_LC_LoginState_LoginState_ARRAYSIZE = LoginState_LC_LoginState_LoginState_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginState_LC_LoginState_descriptor();
inline const ::std::string& LoginState_LC_LoginState_Name(LoginState_LC_LoginState value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginState_LC_LoginState_descriptor(), value);
}
inline bool LoginState_LC_LoginState_Parse(
    const ::std::string& name, LoginState_LC_LoginState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginState_LC_LoginState>(
    LoginState_LC_LoginState_descriptor(), name, value);
}
// ===================================================================

class ClientNeedLogin_LC :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Login.ClientNeedLogin_LC) */ {
 public:
  ClientNeedLogin_LC();
  virtual ~ClientNeedLogin_LC();

  ClientNeedLogin_LC(const ClientNeedLogin_LC& from);

  inline ClientNeedLogin_LC& operator=(const ClientNeedLogin_LC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientNeedLogin_LC(ClientNeedLogin_LC&& from) noexcept
    : ClientNeedLogin_LC() {
    *this = ::std::move(from);
  }

  inline ClientNeedLogin_LC& operator=(ClientNeedLogin_LC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClientNeedLogin_LC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientNeedLogin_LC* internal_default_instance() {
    return reinterpret_cast<const ClientNeedLogin_LC*>(
               &_ClientNeedLogin_LC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientNeedLogin_LC* other);
  friend void swap(ClientNeedLogin_LC& a, ClientNeedLogin_LC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientNeedLogin_LC* New() const final {
    return CreateMaybeMessage<ClientNeedLogin_LC>(nullptr);
  }

  ClientNeedLogin_LC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientNeedLogin_LC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientNeedLogin_LC& from);
  void MergeFrom(const ClientNeedLogin_LC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientNeedLogin_LC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Login.ClientNeedLogin_LC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class ClientLogin_CL :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Login.ClientLogin_CL) */ {
 public:
  ClientLogin_CL();
  virtual ~ClientLogin_CL();

  ClientLogin_CL(const ClientLogin_CL& from);

  inline ClientLogin_CL& operator=(const ClientLogin_CL& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientLogin_CL(ClientLogin_CL&& from) noexcept
    : ClientLogin_CL() {
    *this = ::std::move(from);
  }

  inline ClientLogin_CL& operator=(ClientLogin_CL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClientLogin_CL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientLogin_CL* internal_default_instance() {
    return reinterpret_cast<const ClientLogin_CL*>(
               &_ClientLogin_CL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClientLogin_CL* other);
  friend void swap(ClientLogin_CL& a, ClientLogin_CL& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientLogin_CL* New() const final {
    return CreateMaybeMessage<ClientLogin_CL>(nullptr);
  }

  ClientLogin_CL* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientLogin_CL>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientLogin_CL& from);
  void MergeFrom(const ClientLogin_CL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientLogin_CL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // string SessionId = 2;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // @@protoc_insertion_point(class_scope:Login.ClientLogin_CL)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class LoginState_LC :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Login.LoginState_LC) */ {
 public:
  LoginState_LC();
  virtual ~LoginState_LC();

  LoginState_LC(const LoginState_LC& from);

  inline LoginState_LC& operator=(const LoginState_LC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginState_LC(LoginState_LC&& from) noexcept
    : LoginState_LC() {
    *this = ::std::move(from);
  }

  inline LoginState_LC& operator=(LoginState_LC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoginState_LC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginState_LC* internal_default_instance() {
    return reinterpret_cast<const LoginState_LC*>(
               &_LoginState_LC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoginState_LC* other);
  friend void swap(LoginState_LC& a, LoginState_LC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginState_LC* New() const final {
    return CreateMaybeMessage<LoginState_LC>(nullptr);
  }

  LoginState_LC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginState_LC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginState_LC& from);
  void MergeFrom(const LoginState_LC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginState_LC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginState_LC_LoginState LoginState;
  static const LoginState SUCCESS =
    LoginState_LC_LoginState_SUCCESS;
  static const LoginState CODE_ERROR =
    LoginState_LC_LoginState_CODE_ERROR;
  static const LoginState BUSY_ERROR =
    LoginState_LC_LoginState_BUSY_ERROR;
  static const LoginState SESSION_ERROR =
    LoginState_LC_LoginState_SESSION_ERROR;
  static inline bool LoginState_IsValid(int value) {
    return LoginState_LC_LoginState_IsValid(value);
  }
  static const LoginState LoginState_MIN =
    LoginState_LC_LoginState_LoginState_MIN;
  static const LoginState LoginState_MAX =
    LoginState_LC_LoginState_LoginState_MAX;
  static const int LoginState_ARRAYSIZE =
    LoginState_LC_LoginState_LoginState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LoginState_descriptor() {
    return LoginState_LC_LoginState_descriptor();
  }
  static inline const ::std::string& LoginState_Name(LoginState value) {
    return LoginState_LC_LoginState_Name(value);
  }
  static inline bool LoginState_Parse(const ::std::string& name,
      LoginState* value) {
    return LoginState_LC_LoginState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Login.LoginState_LC.LoginState State = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::Login::LoginState_LC_LoginState state() const;
  void set_state(::Login::LoginState_LC_LoginState value);

  // int32 SessionId = 2;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Login.LoginState_LC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  ::google::protobuf::int32 sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientNeedLogin_LC

// -------------------------------------------------------------------

// ClientLogin_CL

// string Code = 1;
inline void ClientLogin_CL::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogin_CL::code() const {
  // @@protoc_insertion_point(field_get:Login.ClientLogin_CL.Code)
  return code_.GetNoArena();
}
inline void ClientLogin_CL::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.ClientLogin_CL.Code)
}
#if LANG_CXX11
inline void ClientLogin_CL::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.ClientLogin_CL.Code)
}
#endif
inline void ClientLogin_CL::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.ClientLogin_CL.Code)
}
inline void ClientLogin_CL::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.ClientLogin_CL.Code)
}
inline ::std::string* ClientLogin_CL::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:Login.ClientLogin_CL.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogin_CL::release_code() {
  // @@protoc_insertion_point(field_release:Login.ClientLogin_CL.Code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogin_CL::set_allocated_code(::std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Login.ClientLogin_CL.Code)
}

// string SessionId = 2;
inline void ClientLogin_CL::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientLogin_CL::sessionid() const {
  // @@protoc_insertion_point(field_get:Login.ClientLogin_CL.SessionId)
  return sessionid_.GetNoArena();
}
inline void ClientLogin_CL::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.ClientLogin_CL.SessionId)
}
#if LANG_CXX11
inline void ClientLogin_CL::set_sessionid(::std::string&& value) {
  
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.ClientLogin_CL.SessionId)
}
#endif
inline void ClientLogin_CL::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.ClientLogin_CL.SessionId)
}
inline void ClientLogin_CL::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.ClientLogin_CL.SessionId)
}
inline ::std::string* ClientLogin_CL::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:Login.ClientLogin_CL.SessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientLogin_CL::release_sessionid() {
  // @@protoc_insertion_point(field_release:Login.ClientLogin_CL.SessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientLogin_CL::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:Login.ClientLogin_CL.SessionId)
}

// -------------------------------------------------------------------

// LoginState_LC

// .Login.LoginState_LC.LoginState State = 1;
inline void LoginState_LC::clear_state() {
  state_ = 0;
}
inline ::Login::LoginState_LC_LoginState LoginState_LC::state() const {
  // @@protoc_insertion_point(field_get:Login.LoginState_LC.State)
  return static_cast< ::Login::LoginState_LC_LoginState >(state_);
}
inline void LoginState_LC::set_state(::Login::LoginState_LC_LoginState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Login.LoginState_LC.State)
}

// int32 SessionId = 2;
inline void LoginState_LC::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 LoginState_LC::sessionid() const {
  // @@protoc_insertion_point(field_get:Login.LoginState_LC.SessionId)
  return sessionid_;
}
inline void LoginState_LC::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:Login.LoginState_LC.SessionId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Login::LoginState_LC_LoginState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Login::LoginState_LC_LoginState>() {
  return ::Login::LoginState_LC_LoginState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Login_2eproto
